syntax = "proto3";
// Automatically generated by goyang https://github.com/openconfig/goyang
// compiled 2020-04-24T10:17:00Z
// do not delete the next line
// goyang-version 1
// module "openconfig-spanning-tree"
// revision "2019-11-28"
// revision "2019-07-10"
// revision "2018-11-21"
// revision "2017-07-14"
// revision "2016-10-03"
// namespace "http://openconfig.net/yang/spanning-tree"

// This module defines configuration and operational state data
// for the spanning tree protocol.
package openconfig_spanning_tree;

// Top-level container for spanning tree configuration and
// state data
message Stp {
  // Global configuration and state data
  Stp_Global global = 6;
  // Enclosing container for the list of interface references
  Stp_Interfaces interfaces = 7;
  // Multi Spanning-tree protocol configuration and operation
  // data
  Stp_Mstp mstp = 8;
  // Rapid per vlan Spanning-tree protocol configuration and
  // operational data
  Stp_RapidPvst rapid_pvst = 9;
  // Rapid Spanning-tree protocol configuration and operation
  // data
  Stp_Rstp rstp = 10;
}

// Global configuration and state data
message Stp_Global {
  // Global spanning tree configuration
  Stp_Global_Config config = 3;
  // Global spanning tree state
  Stp_Global_State state = 4;
}

// Global spanning tree configuration
message Stp_Global_Config {
  // Enable edge port BPDU filter
  bool bpdu_filter = 1;
  // Enable edge port BPDU guard
  bool bpdu_guard = 2;
  // Amount of time, in seconds, the interface receiving BPDUs
  // is disabled. Once the timeout expires, the interface is
  // brought back into service.
  uint32 bpduguard_timeout_recovery = 3;
  // Enable bridge assurance to protect against unidirectional
  // link failure
  bool bridge_assurance = 4;
  // List of the spanning tree protocols enabled on the
  // device
  repeated string enabled_protocol = 5;
  // EtherChannel guard detects a misconfigured EtherChannel
  // when interfaces on the switch are configured as an
  // EtherChannel while interfaces on the other device are not
  // or when not all the interfaces on the other device are in
  // the same EtherChannel.
  bool etherchannel_misconfig_guard = 6;
  // The loop guard default setting for the bridge
  bool loop_guard = 7;
}

// Global spanning tree state
message Stp_Global_State {
  // Enable edge port BPDU filter
  bool bpdu_filter = 1;
  // Enable edge port BPDU guard
  bool bpdu_guard = 2;
  // Amount of time, in seconds, the interface receiving BPDUs
  // is disabled. Once the timeout expires, the interface is
  // brought back into service.
  uint32 bpduguard_timeout_recovery = 3;
  // Enable bridge assurance to protect against unidirectional
  // link failure
  bool bridge_assurance = 4;
  // List of the spanning tree protocols enabled on the
  // device
  repeated string enabled_protocol = 5;
  // EtherChannel guard detects a misconfigured EtherChannel
  // when interfaces on the switch are configured as an
  // EtherChannel while interfaces on the other device are not
  // or when not all the interfaces on the other device are in
  // the same EtherChannel.
  bool etherchannel_misconfig_guard = 6;
  // The loop guard default setting for the bridge
  bool loop_guard = 7;
}

// Enclosing container for the list of interface references
message Stp_Interfaces {
  // List of interfaces on which STP is enable
  repeated Stp_Interfaces_Interface interface = 2;
}

// List of interfaces on which STP is enable
message Stp_Interfaces_Interface {
  // Configuration data for STP on each bridge port
  Stp_Interface_Config config = 4;
  // Reference to the list key
  string name = 2;
  // Operational state data for STP on each bridge port
  Stp_Interface_State state = 5;
}

// Configuration data for STP on each bridge port
message Stp_Interface_Config {
  // Enable edge port BPDU filter
  bool bpdu_filter = 1;
  // Enable edge port BPDU guard
  bool bpdu_guard = 2;
  // Configure the edge port state
  string edge_port = 3;
  // Enable root guard or loop guard
  enum Guard {
    Guard_LOOP = 0;
    Guard_NONE = 1;
    Guard_ROOT = 2;
  };
  Guard guard = 4;
  // specifies the interface's link type
  enum LinkType {
    LinkType_P2P = 0;
    LinkType_SHARED = 1;
  };
  LinkType link_type = 5;
  // Reference to the STP Ethernet interface
  string name = 6;
}

// Operational state data for STP on each bridge port
message Stp_Interface_State {
  // Enable edge port BPDU filter
  bool bpdu_filter = 1;
  // Enable edge port BPDU guard
  bool bpdu_guard = 2;
  // Configure the edge port state
  string edge_port = 3;
  // Enable root guard or loop guard
  enum Guard {
    Guard_LOOP = 0;
    Guard_NONE = 1;
    Guard_ROOT = 2;
  };
  Guard guard = 4;
  // specifies the interface's link type
  enum LinkType {
    LinkType_P2P = 0;
    LinkType_SHARED = 1;
  };
  LinkType link_type = 5;
  // Reference to the STP Ethernet interface
  string name = 6;
}

// Multi Spanning-tree protocol configuration and operation
// data
message Stp_Mstp {
  // Configuration data for MSTP
  Stp_Mstp_Config config = 4;
  // Configuration and operation data for MSTP instances
  Stp_Mstp_MstInstances mst_instances = 5;
  // Operational data for MSTP
  Stp_Mstp_State state = 6;
}

// Configuration data for MSTP
message Stp_Mstp_Config {
  // The delay used by STP bridges to transition root and
  // designated ports to forwarding
  uint32 forwarding_delay = 1;
  // The interval between periodic transmissions of
  // configuration messages by designated ports
  uint32 hello_time = 2;
  // the maximum number of BPDUs per second that the
  // switch can send from an interface
  uint32 hold_count = 3;
  // The maximum age of the information transmitted by the
  // bridge when it is the root bridge
  uint32 max_age = 4;
  // The max hop determines the number of bridges in an MST
  // region that a BPDU can traverse before it is discarded
  uint32 max_hop = 5;
  // The Configuration Name in the MST Configuration Identifier
  string name = 6;
  // The Revision Level in the MST Configuration Identifier
  uint32 revision = 7;
}

// Configuration and operation data for MSTP instances
message Stp_Mstp_MstInstances {
  // List of the mstp instances
  repeated Stp_Mstp_MstInstances_MstInstance mst_instance = 2;
}

// List of the mstp instances
message Stp_Mstp_MstInstances_MstInstance {
  // Configuration data for MSTP instance
  Stp_Mstp_MstInstance_Config config = 5;
  // Enclosing container for the list of interface references
  Stp_Mstp_MstInstance_Interfaces interfaces = 6;
  // Reference to the list key
  string mst_id = 3;
  // Operational data for MSTP instance
  Stp_Mstp_MstInstance_State state = 7;
}

// Configuration data for MSTP instance
message Stp_Mstp_MstInstance_Config {
  // The manageable component of the Bridge Identifier
  uint32 bridge_priority = 1;
  // In an MSTP Bridge, an MSTID, i.e., a value used to identify
  // a spanning tree (or MST) instance.
  uint32 mst_id = 2;
  // list of vlans mapped to the MST instance
  message Vlan {
    oneof Vlan {
    string Vlan_string = 3;
      uint32 Vlan_uint32 = 4;
    }
  }
  repeated Vlan vlan = 5;
}

// Enclosing container for the list of interface references
message Stp_Mstp_MstInstance_Interfaces {
  // List of interfaces on which STP is enable
  repeated Stp_Mstp_MstInstance_Interfaces_Interface interface = 2;
}

// List of interfaces on which STP is enable
message Stp_Mstp_MstInstance_Interfaces_Interface {
  // Configuration data for STP on each interface
  Stp_Mstp_MstInstance_Interface_Config config = 4;
  // Reference to the list key
  string name = 2;
  // Operational state data for STP on each interface
  Stp_Mstp_MstInstance_Interface_State state = 5;
}

// Configuration data for STP on each interface
message Stp_Mstp_MstInstance_Interface_Config {
  // The port's contribution, when it is the Root Port,
  // to the Root Path Cost for the Bridge
  uint32 cost = 1;
  // Reference to the STP ethernet interface
  string name = 2;
  // The manageable component of the Port Identifier,
  // also known as the Port Priority
  uint32 port_priority = 3;
}

// Operational state data for STP on each interface
message Stp_Mstp_MstInstance_Interface_State {
  // The port's contribution, when it is the Root Port,
  // to the Root Path Cost for the Bridge
  uint32 cost = 1;
  // The BPDU packet transmition statistics
  Stp_Mstp_MstInstance_Interface_State_Counters counters = 16;
  // The bridge address of the bridge that this port considers
  // to be the designated bridge for this port's segment.
  string designated_bridge_address = 3;
  // The bridge priority of the bridge that this port considers
  // to be the designated bridge for this port's segment.
  uint32 designated_bridge_priority = 4;
  // The path cost of the Designated Port of the
  // segment connected to this port
  uint32 designated_cost = 5;
  // The Port number of the port on the Designated
  // Bridge for this port's segment, two octet string
  uint32 designated_port_num = 6;
  // The Port priority of the port on the Designated
  // Bridge for this port's segment, two octet string
  uint32 designated_port_priority = 7;
  // The bridge address of the bridge recorded as the
  // root in the configuration BPDUs transmitted by the designated
  // bridge for the segment to which the port is attached
  string designated_root_address = 8;
  // The bridge priority of the bridge recorded as the
  // root in the configuration BPDUs transmitted by the designated
  // bridge for the segment to which the port is attached
  uint32 designated_root_priority = 9;
  // The number of times this port has transitioned
  // from the Learning state to the Forwarding state
  uint64 forward_transisitions = 10;
  // Reference to the STP ethernet interface
  string name = 11;
  // The port number of the bridge port
  uint32 port_num = 12;
  // The manageable component of the Port Identifier,
  // also known as the Port Priority
  uint32 port_priority = 13;
  // The current state of the bridge port
  string port_state = 14;
  // The current role of the bridge port
  string role = 15;
}

// The BPDU packet transmition statistics
message Stp_Mstp_MstInstance_Interface_State_Counters {
  // The number of BPDU packet received
  uint64 bpdu_received = 1;
  // The number of BPDU packet sent
  uint64 bpdu_sent = 2;
}

// Operational data for MSTP instance
message Stp_Mstp_MstInstance_State {
  // A unique 48-bit Universally Administered MAC Address
  // assigned to the bridge
  string bridge_address = 1;
  // The manageable component of the Bridge Identifier
  uint32 bridge_priority = 2;
  // The bridge address of the root of the spanning
  // tree, as determined by the Spanning Tree Protocol,
  // as executed by this node
  string designated_root_address = 3;
  // The bridge priority of the root of the spanning
  // tree, as determined by the Spanning Tree Protocol,
  // as executed by this node
  uint32 designated_root_priority = 4;
  // This time value determines the interval length
  // during which no more than two Configuration bridge
  // PDUs shall be transmitted by this node
  uint32 hold_time = 5;
  // The time at which the last topology change was
  // detected by the bridge entity. The value is
  // expressed relative to the Unix Epoch (Jan 1, 1970
  // 00:00:00 UTC).
  uint64 last_topology_change = 6;
  // In an MSTP Bridge, an MSTID, i.e., a value used to identify
  // a spanning tree (or MST) instance.
  uint32 mst_id = 7;
  // The cost of the path to the root as seen from this bridge
  uint32 root_cost = 8;
  // The port number of the port which offers the lowest
  // cost path from this bridge to the root bridge
  uint32 root_port = 9;
  // The total number of topology changes detected by
  // this bridge since the management entity was last
  // reset or initialized
  uint64 topology_changes = 10;
  // list of vlans mapped to the MST instance
  message Vlan {
    oneof Vlan {
    string Vlan_string = 11;
      uint32 Vlan_uint32 = 12;
    }
  }
  repeated Vlan vlan = 13;
}

// Operational data for MSTP
message Stp_Mstp_State {
  // The delay used by STP bridges to transition root and
  // designated ports to forwarding
  uint32 forwarding_delay = 1;
  // The interval between periodic transmissions of
  // configuration messages by designated ports
  uint32 hello_time = 2;
  // the maximum number of BPDUs per second that the
  // switch can send from an interface
  uint32 hold_count = 3;
  // The maximum age of the information transmitted by the
  // bridge when it is the root bridge
  uint32 max_age = 4;
  // The max hop determines the number of bridges in an MST
  // region that a BPDU can traverse before it is discarded
  uint32 max_hop = 5;
  // The Configuration Name in the MST Configuration Identifier
  string name = 6;
  // The Revision Level in the MST Configuration Identifier
  uint32 revision = 7;
}

// Rapid per vlan Spanning-tree protocol configuration and
// operational data
message Stp_RapidPvst {
  // List of the vlans
  repeated Stp_RapidPvst_Vlan vlan = 2;
}

// List of the vlans
message Stp_RapidPvst_Vlan {
  // Configuration data for each vlan
  Stp_RapidPvst_Vlan_Config config = 5;
  // Enclosing container for the list of interface references
  Stp_RapidPvst_Vlan_Interfaces interfaces = 6;
  // Operational data for each vlan
  Stp_RapidPvst_Vlan_State state = 7;
  // Reference to the list key
  string vlan_id = 4;
}

// Configuration data for each vlan
message Stp_RapidPvst_Vlan_Config {
  // The manageable component of the Bridge Identifier
  uint32 bridge_priority = 1;
  // The delay used by STP bridges to transition root and
  // designated ports to forwarding
  uint32 forwarding_delay = 2;
  // The interval between periodic transmissions of
  // configuration messages by designated ports
  uint32 hello_time = 3;
  // the maximum number of BPDUs per second that the
  // switch can send from an interface
  uint32 hold_count = 4;
  // The maximum age of the information transmitted by the
  // bridge when it is the root bridge
  uint32 max_age = 5;
  // Interface VLAN ID
  uint32 vlan_id = 6;
}

// Enclosing container for the list of interface references
message Stp_RapidPvst_Vlan_Interfaces {
  // List of interfaces on which STP is enable
  repeated Stp_RapidPvst_Vlan_Interfaces_Interface interface = 2;
}

// List of interfaces on which STP is enable
message Stp_RapidPvst_Vlan_Interfaces_Interface {
  // Configuration data for STP on each interface
  Stp_RapidPvst_Vlan_Interface_Config config = 4;
  // Reference to the list key
  string name = 2;
  // Operational state data for STP on each interface
  Stp_RapidPvst_Vlan_Interface_State state = 5;
}

// Configuration data for STP on each interface
message Stp_RapidPvst_Vlan_Interface_Config {
  // The port's contribution, when it is the Root Port,
  // to the Root Path Cost for the Bridge
  uint32 cost = 1;
  // Reference to the STP ethernet interface
  string name = 2;
  // The manageable component of the Port Identifier,
  // also known as the Port Priority
  uint32 port_priority = 3;
}

// Operational state data for STP on each interface
message Stp_RapidPvst_Vlan_Interface_State {
  // The port's contribution, when it is the Root Port,
  // to the Root Path Cost for the Bridge
  uint32 cost = 1;
  // The BPDU packet transmition statistics
  Stp_RapidPvst_Vlan_Interface_State_Counters counters = 16;
  // The bridge address of the bridge that this port considers
  // to be the designated bridge for this port's segment.
  string designated_bridge_address = 3;
  // The bridge priority of the bridge that this port considers
  // to be the designated bridge for this port's segment.
  uint32 designated_bridge_priority = 4;
  // The path cost of the Designated Port of the
  // segment connected to this port
  uint32 designated_cost = 5;
  // The Port number of the port on the Designated
  // Bridge for this port's segment, two octet string
  uint32 designated_port_num = 6;
  // The Port priority of the port on the Designated
  // Bridge for this port's segment, two octet string
  uint32 designated_port_priority = 7;
  // The bridge address of the bridge recorded as the
  // root in the configuration BPDUs transmitted by the designated
  // bridge for the segment to which the port is attached
  string designated_root_address = 8;
  // The bridge priority of the bridge recorded as the
  // root in the configuration BPDUs transmitted by the designated
  // bridge for the segment to which the port is attached
  uint32 designated_root_priority = 9;
  // The number of times this port has transitioned
  // from the Learning state to the Forwarding state
  uint64 forward_transisitions = 10;
  // Reference to the STP ethernet interface
  string name = 11;
  // The port number of the bridge port
  uint32 port_num = 12;
  // The manageable component of the Port Identifier,
  // also known as the Port Priority
  uint32 port_priority = 13;
  // The current state of the bridge port
  string port_state = 14;
  // The current role of the bridge port
  string role = 15;
}

// The BPDU packet transmition statistics
message Stp_RapidPvst_Vlan_Interface_State_Counters {
  // The number of BPDU packet received
  uint64 bpdu_received = 1;
  // The number of BPDU packet sent
  uint64 bpdu_sent = 2;
}

// Operational data for each vlan
message Stp_RapidPvst_Vlan_State {
  // A unique 48-bit Universally Administered MAC Address
  // assigned to the bridge
  string bridge_address = 1;
  // The manageable component of the Bridge Identifier
  uint32 bridge_priority = 2;
  // The bridge address of the root of the spanning
  // tree, as determined by the Spanning Tree Protocol,
  // as executed by this node
  string designated_root_address = 3;
  // The bridge priority of the root of the spanning
  // tree, as determined by the Spanning Tree Protocol,
  // as executed by this node
  uint32 designated_root_priority = 4;
  // The delay used by STP bridges to transition root and
  // designated ports to forwarding
  uint32 forwarding_delay = 5;
  // The interval between periodic transmissions of
  // configuration messages by designated ports
  uint32 hello_time = 6;
  // the maximum number of BPDUs per second that the
  // switch can send from an interface
  uint32 hold_count = 7;
  // This time value determines the interval length
  // during which no more than two Configuration bridge
  // PDUs shall be transmitted by this node
  uint32 hold_time = 8;
  // The time at which the last topology change was
  // detected by the bridge entity. The value is
  // expressed relative to the Unix Epoch (Jan 1, 1970
  // 00:00:00 UTC).
  uint64 last_topology_change = 9;
  // The maximum age of the information transmitted by the
  // bridge when it is the root bridge
  uint32 max_age = 10;
  // The cost of the path to the root as seen from this bridge
  uint32 root_cost = 11;
  // The port number of the port which offers the lowest
  // cost path from this bridge to the root bridge
  uint32 root_port = 12;
  // The total number of topology changes detected by
  // this bridge since the management entity was last
  // reset or initialized
  uint64 topology_changes = 13;
  // Interface VLAN ID
  uint32 vlan_id = 14;
}

// Rapid Spanning-tree protocol configuration and operation
// data
message Stp_Rstp {
  // Configuration data for RSTP
  Stp_Rstp_Config config = 4;
  // Enclosing container for the list of interface references
  Stp_Rstp_Interfaces interfaces = 5;
  // Operational state data for RSTP
  Stp_Rstp_State state = 6;
}

// Configuration data for RSTP
message Stp_Rstp_Config {
  // The manageable component of the Bridge Identifier
  uint32 bridge_priority = 1;
  // The delay used by STP bridges to transition root and
  // designated ports to forwarding
  uint32 forwarding_delay = 2;
  // The interval between periodic transmissions of
  // configuration messages by designated ports
  uint32 hello_time = 3;
  // the maximum number of BPDUs per second that the
  // switch can send from an interface
  uint32 hold_count = 4;
  // The maximum age of the information transmitted by the
  // bridge when it is the root bridge
  uint32 max_age = 5;
}

// Enclosing container for the list of interface references
message Stp_Rstp_Interfaces {
  // List of interfaces on which STP is enable
  repeated Stp_Rstp_Interfaces_Interface interface = 2;
}

// List of interfaces on which STP is enable
message Stp_Rstp_Interfaces_Interface {
  // Configuration data for STP on each interface
  Stp_Rstp_Interface_Config config = 4;
  // Reference to the list key
  string name = 2;
  // Operational state data for STP on each interface
  Stp_Rstp_Interface_State state = 5;
}

// Configuration data for STP on each interface
message Stp_Rstp_Interface_Config {
  // The port's contribution, when it is the Root Port,
  // to the Root Path Cost for the Bridge
  uint32 cost = 1;
  // Reference to the STP ethernet interface
  string name = 2;
  // The manageable component of the Port Identifier,
  // also known as the Port Priority
  uint32 port_priority = 3;
}

// Operational state data for STP on each interface
message Stp_Rstp_Interface_State {
  // The port's contribution, when it is the Root Port,
  // to the Root Path Cost for the Bridge
  uint32 cost = 1;
  // The BPDU packet transmition statistics
  Stp_Rstp_Interface_State_Counters counters = 16;
  // The bridge address of the bridge that this port considers
  // to be the designated bridge for this port's segment.
  string designated_bridge_address = 3;
  // The bridge priority of the bridge that this port considers
  // to be the designated bridge for this port's segment.
  uint32 designated_bridge_priority = 4;
  // The path cost of the Designated Port of the
  // segment connected to this port
  uint32 designated_cost = 5;
  // The Port number of the port on the Designated
  // Bridge for this port's segment, two octet string
  uint32 designated_port_num = 6;
  // The Port priority of the port on the Designated
  // Bridge for this port's segment, two octet string
  uint32 designated_port_priority = 7;
  // The bridge address of the bridge recorded as the
  // root in the configuration BPDUs transmitted by the designated
  // bridge for the segment to which the port is attached
  string designated_root_address = 8;
  // The bridge priority of the bridge recorded as the
  // root in the configuration BPDUs transmitted by the designated
  // bridge for the segment to which the port is attached
  uint32 designated_root_priority = 9;
  // The number of times this port has transitioned
  // from the Learning state to the Forwarding state
  uint64 forward_transisitions = 10;
  // Reference to the STP ethernet interface
  string name = 11;
  // The port number of the bridge port
  uint32 port_num = 12;
  // The manageable component of the Port Identifier,
  // also known as the Port Priority
  uint32 port_priority = 13;
  // The current state of the bridge port
  string port_state = 14;
  // The current role of the bridge port
  string role = 15;
}

// The BPDU packet transmition statistics
message Stp_Rstp_Interface_State_Counters {
  // The number of BPDU packet received
  uint64 bpdu_received = 1;
  // The number of BPDU packet sent
  uint64 bpdu_sent = 2;
}

// Operational state data for RSTP
message Stp_Rstp_State {
  // A unique 48-bit Universally Administered MAC Address
  // assigned to the bridge
  string bridge_address = 1;
  // The manageable component of the Bridge Identifier
  uint32 bridge_priority = 2;
  // The bridge address of the root of the spanning
  // tree, as determined by the Spanning Tree Protocol,
  // as executed by this node
  string designated_root_address = 3;
  // The bridge priority of the root of the spanning
  // tree, as determined by the Spanning Tree Protocol,
  // as executed by this node
  uint32 designated_root_priority = 4;
  // The delay used by STP bridges to transition root and
  // designated ports to forwarding
  uint32 forwarding_delay = 5;
  // The interval between periodic transmissions of
  // configuration messages by designated ports
  uint32 hello_time = 6;
  // the maximum number of BPDUs per second that the
  // switch can send from an interface
  uint32 hold_count = 7;
  // This time value determines the interval length
  // during which no more than two Configuration bridge
  // PDUs shall be transmitted by this node
  uint32 hold_time = 8;
  // The time at which the last topology change was
  // detected by the bridge entity. The value is
  // expressed relative to the Unix Epoch (Jan 1, 1970
  // 00:00:00 UTC).
  uint64 last_topology_change = 9;
  // The maximum age of the information transmitted by the
  // bridge when it is the root bridge
  uint32 max_age = 10;
  // The cost of the path to the root as seen from this bridge
  uint32 root_cost = 11;
  // The port number of the port which offers the lowest
  // cost path from this bridge to the root bridge
  uint32 root_port = 12;
  // The total number of topology changes detected by
  // this bridge since the management entity was last
  // reset or initialized
  uint64 topology_changes = 13;
}

// Do not delete the lines below, they preserve tag information for goyang.
// goyang-tag Stp global/Global 1
// goyang-tag Stp global/Stp_Global 6
// goyang-tag Stp interfaces/Interfaces 2
// goyang-tag Stp interfaces/Stp_Interfaces 7
// goyang-tag Stp mstp/Mstp 3
// goyang-tag Stp mstp/Stp_Mstp 8
// goyang-tag Stp rapid_pvst/RapidPvst 4
// goyang-tag Stp rapid_pvst/Stp_RapidPvst 9
// goyang-tag Stp rstp/Rstp 5
// goyang-tag Stp rstp/Stp_Rstp 10
// goyang-tag Stp_Global config/Config 1
// goyang-tag Stp_Global config/Stp_Global_Config 3
// goyang-tag Stp_Global state/State 2
// goyang-tag Stp_Global state/Stp_Global_State 4
// goyang-tag Stp_Global_Config bpdu_filter/bool 1
// goyang-tag Stp_Global_Config bpdu_guard/bool 2
// goyang-tag Stp_Global_Config bpduguard_timeout_recovery/uint32 3
// goyang-tag Stp_Global_Config bridge_assurance/bool 4
// goyang-tag Stp_Global_Config enabled_protocol/string[] 5
// goyang-tag Stp_Global_Config etherchannel_misconfig_guard/bool 6
// goyang-tag Stp_Global_Config loop_guard/bool 7
// goyang-tag Stp_Global_State bpdu_filter/bool 1
// goyang-tag Stp_Global_State bpdu_guard/bool 2
// goyang-tag Stp_Global_State bpduguard_timeout_recovery/uint32 3
// goyang-tag Stp_Global_State bridge_assurance/bool 4
// goyang-tag Stp_Global_State enabled_protocol/string[] 5
// goyang-tag Stp_Global_State etherchannel_misconfig_guard/bool 6
// goyang-tag Stp_Global_State loop_guard/bool 7
// goyang-tag Stp_Interface_Config bpdu_filter/bool 1
// goyang-tag Stp_Interface_Config bpdu_guard/bool 2
// goyang-tag Stp_Interface_Config edge_port/string 3
// goyang-tag Stp_Interface_Config guard/Guard 4
// goyang-tag Stp_Interface_Config link_type/LinkType 5
// goyang-tag Stp_Interface_Config name/string 6
// goyang-tag Stp_Interface_State bpdu_filter/bool 1
// goyang-tag Stp_Interface_State bpdu_guard/bool 2
// goyang-tag Stp_Interface_State edge_port/string 3
// goyang-tag Stp_Interface_State guard/Guard 4
// goyang-tag Stp_Interface_State link_type/LinkType 5
// goyang-tag Stp_Interface_State name/string 6
// goyang-tag Stp_Interfaces interface/Interface[] 1
// goyang-tag Stp_Interfaces interface/Stp_Interfaces_Interface[] 2
// goyang-tag Stp_Interfaces_Interface config/Config 1
// goyang-tag Stp_Interfaces_Interface config/Stp_Interface_Config 4
// goyang-tag Stp_Interfaces_Interface name/string 2
// goyang-tag Stp_Interfaces_Interface state/State 3
// goyang-tag Stp_Interfaces_Interface state/Stp_Interface_State 5
// goyang-tag Stp_Mstp config/Config 1
// goyang-tag Stp_Mstp config/Stp_Mstp_Config 4
// goyang-tag Stp_Mstp mst_instances/MstInstances 2
// goyang-tag Stp_Mstp mst_instances/Stp_Mstp_MstInstances 5
// goyang-tag Stp_Mstp state/State 3
// goyang-tag Stp_Mstp state/Stp_Mstp_State 6
// goyang-tag Stp_Mstp_Config forwarding_delay/uint32 1
// goyang-tag Stp_Mstp_Config hello_time/uint32 2
// goyang-tag Stp_Mstp_Config hold_count/uint32 3
// goyang-tag Stp_Mstp_Config max_age/uint32 4
// goyang-tag Stp_Mstp_Config max_hop/uint32 5
// goyang-tag Stp_Mstp_Config name/string 6
// goyang-tag Stp_Mstp_Config revision/uint32 7
// goyang-tag Stp_Mstp_MstInstance_Config bridge_priority/uint32 1
// goyang-tag Stp_Mstp_MstInstance_Config mst_id/uint32 2
// goyang-tag Stp_Mstp_MstInstance_Config vlan/Vlan[] 5
// goyang-tag Stp_Mstp_MstInstance_Config vlan/string 3
// goyang-tag Stp_Mstp_MstInstance_Config vlan/uint32 4
// goyang-tag Stp_Mstp_MstInstance_Interface_Config cost/uint32 1
// goyang-tag Stp_Mstp_MstInstance_Interface_Config name/string 2
// goyang-tag Stp_Mstp_MstInstance_Interface_Config port_priority/uint32 3
// goyang-tag Stp_Mstp_MstInstance_Interface_State cost/uint32 1
// goyang-tag Stp_Mstp_MstInstance_Interface_State counters/Counters 2
// goyang-tag Stp_Mstp_MstInstance_Interface_State counters/Stp_Mstp_MstInstance_Interface_State_Counters 16
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_bridge_address/string 3
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_bridge_priority/uint32 4
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_cost/uint32 5
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_port_num/uint32 6
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_port_priority/uint32 7
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_root_address/string 8
// goyang-tag Stp_Mstp_MstInstance_Interface_State designated_root_priority/uint32 9
// goyang-tag Stp_Mstp_MstInstance_Interface_State forward_transisitions/uint64 10
// goyang-tag Stp_Mstp_MstInstance_Interface_State name/string 11
// goyang-tag Stp_Mstp_MstInstance_Interface_State port_num/uint32 12
// goyang-tag Stp_Mstp_MstInstance_Interface_State port_priority/uint32 13
// goyang-tag Stp_Mstp_MstInstance_Interface_State port_state/string 14
// goyang-tag Stp_Mstp_MstInstance_Interface_State role/string 15
// goyang-tag Stp_Mstp_MstInstance_Interface_State_Counters bpdu_received/uint64 1
// goyang-tag Stp_Mstp_MstInstance_Interface_State_Counters bpdu_sent/uint64 2
// goyang-tag Stp_Mstp_MstInstance_Interfaces interface/Interface[] 1
// goyang-tag Stp_Mstp_MstInstance_Interfaces interface/Stp_Mstp_MstInstance_Interfaces_Interface[] 2
// goyang-tag Stp_Mstp_MstInstance_Interfaces_Interface config/Config 1
// goyang-tag Stp_Mstp_MstInstance_Interfaces_Interface config/Stp_Mstp_MstInstance_Interface_Config 4
// goyang-tag Stp_Mstp_MstInstance_Interfaces_Interface name/string 2
// goyang-tag Stp_Mstp_MstInstance_Interfaces_Interface state/State 3
// goyang-tag Stp_Mstp_MstInstance_Interfaces_Interface state/Stp_Mstp_MstInstance_Interface_State 5
// goyang-tag Stp_Mstp_MstInstance_State bridge_address/string 1
// goyang-tag Stp_Mstp_MstInstance_State bridge_priority/uint32 2
// goyang-tag Stp_Mstp_MstInstance_State designated_root_address/string 3
// goyang-tag Stp_Mstp_MstInstance_State designated_root_priority/uint32 4
// goyang-tag Stp_Mstp_MstInstance_State hold_time/uint32 5
// goyang-tag Stp_Mstp_MstInstance_State last_topology_change/uint64 6
// goyang-tag Stp_Mstp_MstInstance_State mst_id/uint32 7
// goyang-tag Stp_Mstp_MstInstance_State root_cost/uint32 8
// goyang-tag Stp_Mstp_MstInstance_State root_port/uint32 9
// goyang-tag Stp_Mstp_MstInstance_State topology_changes/uint64 10
// goyang-tag Stp_Mstp_MstInstance_State vlan/Vlan[] 13
// goyang-tag Stp_Mstp_MstInstance_State vlan/string 11
// goyang-tag Stp_Mstp_MstInstance_State vlan/uint32 12
// goyang-tag Stp_Mstp_MstInstances mst_instance/MstInstance[] 1
// goyang-tag Stp_Mstp_MstInstances mst_instance/Stp_Mstp_MstInstances_MstInstance[] 2
// goyang-tag Stp_Mstp_MstInstances_MstInstance config/Config 1
// goyang-tag Stp_Mstp_MstInstances_MstInstance config/Stp_Mstp_MstInstance_Config 5
// goyang-tag Stp_Mstp_MstInstances_MstInstance interfaces/Interfaces 2
// goyang-tag Stp_Mstp_MstInstances_MstInstance interfaces/Stp_Mstp_MstInstance_Interfaces 6
// goyang-tag Stp_Mstp_MstInstances_MstInstance mst_id/string 3
// goyang-tag Stp_Mstp_MstInstances_MstInstance state/State 4
// goyang-tag Stp_Mstp_MstInstances_MstInstance state/Stp_Mstp_MstInstance_State 7
// goyang-tag Stp_Mstp_State forwarding_delay/uint32 1
// goyang-tag Stp_Mstp_State hello_time/uint32 2
// goyang-tag Stp_Mstp_State hold_count/uint32 3
// goyang-tag Stp_Mstp_State max_age/uint32 4
// goyang-tag Stp_Mstp_State max_hop/uint32 5
// goyang-tag Stp_Mstp_State name/string 6
// goyang-tag Stp_Mstp_State revision/uint32 7
// goyang-tag Stp_RapidPvst vlan/Stp_RapidPvst_Vlan[] 2
// goyang-tag Stp_RapidPvst vlan/Vlan[] 1
// goyang-tag Stp_RapidPvst_Vlan config/Config 1
// goyang-tag Stp_RapidPvst_Vlan config/Stp_RapidPvst_Vlan_Config 5
// goyang-tag Stp_RapidPvst_Vlan interfaces/Interfaces 2
// goyang-tag Stp_RapidPvst_Vlan interfaces/Stp_RapidPvst_Vlan_Interfaces 6
// goyang-tag Stp_RapidPvst_Vlan state/State 3
// goyang-tag Stp_RapidPvst_Vlan state/Stp_RapidPvst_Vlan_State 7
// goyang-tag Stp_RapidPvst_Vlan vlan_id/string 4
// goyang-tag Stp_RapidPvst_Vlan_Config bridge_priority/uint32 1
// goyang-tag Stp_RapidPvst_Vlan_Config forwarding_delay/uint32 2
// goyang-tag Stp_RapidPvst_Vlan_Config hello_time/uint32 3
// goyang-tag Stp_RapidPvst_Vlan_Config hold_count/uint32 4
// goyang-tag Stp_RapidPvst_Vlan_Config max_age/uint32 5
// goyang-tag Stp_RapidPvst_Vlan_Config vlan_id/uint32 6
// goyang-tag Stp_RapidPvst_Vlan_Interface_Config cost/uint32 1
// goyang-tag Stp_RapidPvst_Vlan_Interface_Config name/string 2
// goyang-tag Stp_RapidPvst_Vlan_Interface_Config port_priority/uint32 3
// goyang-tag Stp_RapidPvst_Vlan_Interface_State cost/uint32 1
// goyang-tag Stp_RapidPvst_Vlan_Interface_State counters/Counters 2
// goyang-tag Stp_RapidPvst_Vlan_Interface_State counters/Stp_RapidPvst_Vlan_Interface_State_Counters 16
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_bridge_address/string 3
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_bridge_priority/uint32 4
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_cost/uint32 5
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_port_num/uint32 6
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_port_priority/uint32 7
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_root_address/string 8
// goyang-tag Stp_RapidPvst_Vlan_Interface_State designated_root_priority/uint32 9
// goyang-tag Stp_RapidPvst_Vlan_Interface_State forward_transisitions/uint64 10
// goyang-tag Stp_RapidPvst_Vlan_Interface_State name/string 11
// goyang-tag Stp_RapidPvst_Vlan_Interface_State port_num/uint32 12
// goyang-tag Stp_RapidPvst_Vlan_Interface_State port_priority/uint32 13
// goyang-tag Stp_RapidPvst_Vlan_Interface_State port_state/string 14
// goyang-tag Stp_RapidPvst_Vlan_Interface_State role/string 15
// goyang-tag Stp_RapidPvst_Vlan_Interface_State_Counters bpdu_received/uint64 1
// goyang-tag Stp_RapidPvst_Vlan_Interface_State_Counters bpdu_sent/uint64 2
// goyang-tag Stp_RapidPvst_Vlan_Interfaces interface/Interface[] 1
// goyang-tag Stp_RapidPvst_Vlan_Interfaces interface/Stp_RapidPvst_Vlan_Interfaces_Interface[] 2
// goyang-tag Stp_RapidPvst_Vlan_Interfaces_Interface config/Config 1
// goyang-tag Stp_RapidPvst_Vlan_Interfaces_Interface config/Stp_RapidPvst_Vlan_Interface_Config 4
// goyang-tag Stp_RapidPvst_Vlan_Interfaces_Interface name/string 2
// goyang-tag Stp_RapidPvst_Vlan_Interfaces_Interface state/State 3
// goyang-tag Stp_RapidPvst_Vlan_Interfaces_Interface state/Stp_RapidPvst_Vlan_Interface_State 5
// goyang-tag Stp_RapidPvst_Vlan_State bridge_address/string 1
// goyang-tag Stp_RapidPvst_Vlan_State bridge_priority/uint32 2
// goyang-tag Stp_RapidPvst_Vlan_State designated_root_address/string 3
// goyang-tag Stp_RapidPvst_Vlan_State designated_root_priority/uint32 4
// goyang-tag Stp_RapidPvst_Vlan_State forwarding_delay/uint32 5
// goyang-tag Stp_RapidPvst_Vlan_State hello_time/uint32 6
// goyang-tag Stp_RapidPvst_Vlan_State hold_count/uint32 7
// goyang-tag Stp_RapidPvst_Vlan_State hold_time/uint32 8
// goyang-tag Stp_RapidPvst_Vlan_State last_topology_change/uint64 9
// goyang-tag Stp_RapidPvst_Vlan_State max_age/uint32 10
// goyang-tag Stp_RapidPvst_Vlan_State root_cost/uint32 11
// goyang-tag Stp_RapidPvst_Vlan_State root_port/uint32 12
// goyang-tag Stp_RapidPvst_Vlan_State topology_changes/uint64 13
// goyang-tag Stp_RapidPvst_Vlan_State vlan_id/uint32 14
// goyang-tag Stp_Rstp config/Config 1
// goyang-tag Stp_Rstp config/Stp_Rstp_Config 4
// goyang-tag Stp_Rstp interfaces/Interfaces 2
// goyang-tag Stp_Rstp interfaces/Stp_Rstp_Interfaces 5
// goyang-tag Stp_Rstp state/State 3
// goyang-tag Stp_Rstp state/Stp_Rstp_State 6
// goyang-tag Stp_Rstp_Config bridge_priority/uint32 1
// goyang-tag Stp_Rstp_Config forwarding_delay/uint32 2
// goyang-tag Stp_Rstp_Config hello_time/uint32 3
// goyang-tag Stp_Rstp_Config hold_count/uint32 4
// goyang-tag Stp_Rstp_Config max_age/uint32 5
// goyang-tag Stp_Rstp_Interface_Config cost/uint32 1
// goyang-tag Stp_Rstp_Interface_Config name/string 2
// goyang-tag Stp_Rstp_Interface_Config port_priority/uint32 3
// goyang-tag Stp_Rstp_Interface_State cost/uint32 1
// goyang-tag Stp_Rstp_Interface_State counters/Counters 2
// goyang-tag Stp_Rstp_Interface_State counters/Stp_Rstp_Interface_State_Counters 16
// goyang-tag Stp_Rstp_Interface_State designated_bridge_address/string 3
// goyang-tag Stp_Rstp_Interface_State designated_bridge_priority/uint32 4
// goyang-tag Stp_Rstp_Interface_State designated_cost/uint32 5
// goyang-tag Stp_Rstp_Interface_State designated_port_num/uint32 6
// goyang-tag Stp_Rstp_Interface_State designated_port_priority/uint32 7
// goyang-tag Stp_Rstp_Interface_State designated_root_address/string 8
// goyang-tag Stp_Rstp_Interface_State designated_root_priority/uint32 9
// goyang-tag Stp_Rstp_Interface_State forward_transisitions/uint64 10
// goyang-tag Stp_Rstp_Interface_State name/string 11
// goyang-tag Stp_Rstp_Interface_State port_num/uint32 12
// goyang-tag Stp_Rstp_Interface_State port_priority/uint32 13
// goyang-tag Stp_Rstp_Interface_State port_state/string 14
// goyang-tag Stp_Rstp_Interface_State role/string 15
// goyang-tag Stp_Rstp_Interface_State_Counters bpdu_received/uint64 1
// goyang-tag Stp_Rstp_Interface_State_Counters bpdu_sent/uint64 2
// goyang-tag Stp_Rstp_Interfaces interface/Interface[] 1
// goyang-tag Stp_Rstp_Interfaces interface/Stp_Rstp_Interfaces_Interface[] 2
// goyang-tag Stp_Rstp_Interfaces_Interface config/Config 1
// goyang-tag Stp_Rstp_Interfaces_Interface config/Stp_Rstp_Interface_Config 4
// goyang-tag Stp_Rstp_Interfaces_Interface name/string 2
// goyang-tag Stp_Rstp_Interfaces_Interface state/State 3
// goyang-tag Stp_Rstp_Interfaces_Interface state/Stp_Rstp_Interface_State 5
// goyang-tag Stp_Rstp_State bridge_address/string 1
// goyang-tag Stp_Rstp_State bridge_priority/uint32 2
// goyang-tag Stp_Rstp_State designated_root_address/string 3
// goyang-tag Stp_Rstp_State designated_root_priority/uint32 4
// goyang-tag Stp_Rstp_State forwarding_delay/uint32 5
// goyang-tag Stp_Rstp_State hello_time/uint32 6
// goyang-tag Stp_Rstp_State hold_count/uint32 7
// goyang-tag Stp_Rstp_State hold_time/uint32 8
// goyang-tag Stp_Rstp_State last_topology_change/uint64 9
// goyang-tag Stp_Rstp_State max_age/uint32 10
// goyang-tag Stp_Rstp_State root_cost/uint32 11
// goyang-tag Stp_Rstp_State root_port/uint32 12
// goyang-tag Stp_Rstp_State topology_changes/uint64 13
